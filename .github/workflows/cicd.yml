name: Deploy Spring Boot App

# 워크플로가 시작될 조건 지정
on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Java 버전 확인
      - name: Verify Java version
        run: java -version

      # 4. Gradle로 JAR 파일 빌드
      - name: Build Spring Boot App
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

      # 5. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t spring-boot-app:latest .

      # 6. Docker 이미지 저장
      - name: Save Docker image as tar
        run: |
          docker save spring-boot-app:latest > spring-boot-app.tar

      # 7. Docker 이미지 및 application.yml 업로드
      - name: Upload files to EC2
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            spring-boot-app.tar
          target: /home/ubuntu/

      # 8. EC2에서 application.yml 생성
      - name: Create application.yml on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "${{ secrets.APP_YML }}" > /home/ubuntu/application.yml

      # 9. EC2에서 Docker 컨테이너 실행
      - name: Deploy Docker container on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker load < /home/ubuntu/spring-boot-app.tar
            docker stop spring-boot-app || true
            docker rm spring-boot-app || true
            docker run -d --name spring-boot-app -p 8080:8080 \
              -v /home/ubuntu/application.yml:/app/config/application.yml \
              spring-boot-app:latest
